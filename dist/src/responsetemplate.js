"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var responseparser_1 = require("./responseparser");
var responsetemplatemanager_1 = require("./responsetemplatemanager");
var ResponseTemplate = (function () {
    function ResponseTemplate(raw) {
        if (!raw) {
            raw = responsetemplatemanager_1.ResponseTemplateManager.getInstance().getTemplate("empty").getPlain();
        }
        this.raw = raw;
        this.hash = responseparser_1.ResponseParser.parse(raw);
        if (!Object.prototype.hasOwnProperty.call(this.hash, "CODE") ||
            !Object.prototype.hasOwnProperty.call(this.hash, "DESCRIPTION")) {
            this.raw = responsetemplatemanager_1.ResponseTemplateManager.getInstance().getTemplate("invalid").getPlain();
            this.hash = responseparser_1.ResponseParser.parse(this.raw);
        }
    }
    ResponseTemplate.prototype.getCode = function () {
        return parseInt(this.hash.CODE, 10);
    };
    ResponseTemplate.prototype.getDescription = function () {
        return this.hash.DESCRIPTION;
    };
    ResponseTemplate.prototype.getPlain = function () {
        return this.raw;
    };
    ResponseTemplate.prototype.getQueuetime = function () {
        if (Object.prototype.hasOwnProperty.call(this.hash, "QUEUETIME")) {
            return parseFloat(this.hash.QUEUETIME);
        }
        return 0.00;
    };
    ResponseTemplate.prototype.getHash = function () {
        return this.hash;
    };
    ResponseTemplate.prototype.getRuntime = function () {
        if (Object.prototype.hasOwnProperty.call(this.hash, "RUNTIME")) {
            return parseFloat(this.hash.RUNTIME);
        }
        return 0.00;
    };
    ResponseTemplate.prototype.isError = function () {
        return this.hash.CODE.charAt(0) === "5";
    };
    ResponseTemplate.prototype.isSuccess = function () {
        return this.hash.CODE.charAt(0) === "2";
    };
    ResponseTemplate.prototype.isTmpError = function () {
        return this.hash.CODE.charAt(0) === "4";
    };
    ResponseTemplate.prototype.isPending = function () {
        return (Object.prototype.hasOwnProperty.call(this.hash, "PENDING") ? this.hash.PENDING === "1" : false);
    };
    return ResponseTemplate;
}());
exports.ResponseTemplate = ResponseTemplate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2V0ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXNwb25zZXRlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbURBQWtEO0FBQ2xELHFFQUFvRTtBQUtwRTtJQWNJLDBCQUFtQixHQUFXO1FBQzFCLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDTixHQUFHLEdBQUcsaURBQXVCLENBQUMsV0FBVyxFQUFFLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQy9FO1FBQ0QsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLCtCQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLElBQ0ksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7WUFDeEQsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsRUFDakU7WUFDRSxJQUFJLENBQUMsR0FBRyxHQUFHLGlEQUF1QixDQUFDLFdBQVcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNuRixJQUFJLENBQUMsSUFBSSxHQUFHLCtCQUFjLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM5QztJQUNMLENBQUM7SUFNTSxrQ0FBTyxHQUFkO1FBQ0ksT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQU1NLHlDQUFjLEdBQXJCO1FBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUNqQyxDQUFDO0lBTU0sbUNBQVEsR0FBZjtRQUNJLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNwQixDQUFDO0lBTU0sdUNBQVksR0FBbkI7UUFDSSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxFQUFFO1lBQzlELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDMUM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBTU0sa0NBQU8sR0FBZDtRQUNJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBTU0scUNBQVUsR0FBakI7UUFDSSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFO1lBQzVELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBT00sa0NBQU8sR0FBZDtRQUNJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQztJQUM1QyxDQUFDO0lBT00sb0NBQVMsR0FBaEI7UUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUM7SUFDNUMsQ0FBQztJQU9NLHFDQUFVLEdBQWpCO1FBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDO0lBQzVDLENBQUM7SUFNTSxvQ0FBUyxHQUFoQjtRQUNJLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1RyxDQUFDO0lBQ0wsdUJBQUM7QUFBRCxDQUFDLEFBckhELElBcUhDO0FBckhZLDRDQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc3BvbnNlUGFyc2VyIH0gZnJvbSBcIi4vcmVzcG9uc2VwYXJzZXJcIjtcbmltcG9ydCB7IFJlc3BvbnNlVGVtcGxhdGVNYW5hZ2VyIH0gZnJvbSBcIi4vcmVzcG9uc2V0ZW1wbGF0ZW1hbmFnZXJcIjtcblxuLyoqXG4gKiBSZXNwb25zZVRlbXBsYXRlIGNsYXNzXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXNwb25zZVRlbXBsYXRlIHtcbiAgICAvKipcbiAgICAgKiBwbGFpbiBBUEkgcmVzcG9uc2VcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgcmF3OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogaGFzaCByZXByZXNlbnRhdGlvbiBvZiBwbGFpbiBBUEkgcmVzcG9uc2VcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgaGFzaDogYW55O1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gcmF3IHBsYWluIEFQSSByZXNwb25zZVxuICAgICAqL1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihyYXc6IHN0cmluZykge1xuICAgICAgICBpZiAoIXJhdykge1xuICAgICAgICAgICAgcmF3ID0gUmVzcG9uc2VUZW1wbGF0ZU1hbmFnZXIuZ2V0SW5zdGFuY2UoKS5nZXRUZW1wbGF0ZShcImVtcHR5XCIpLmdldFBsYWluKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yYXcgPSByYXc7XG4gICAgICAgIHRoaXMuaGFzaCA9IFJlc3BvbnNlUGFyc2VyLnBhcnNlKHJhdyk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5oYXNoLCBcIkNPREVcIikgfHxcbiAgICAgICAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5oYXNoLCBcIkRFU0NSSVBUSU9OXCIpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5yYXcgPSBSZXNwb25zZVRlbXBsYXRlTWFuYWdlci5nZXRJbnN0YW5jZSgpLmdldFRlbXBsYXRlKFwiaW52YWxpZFwiKS5nZXRQbGFpbigpO1xuICAgICAgICAgICAgdGhpcy5oYXNoID0gUmVzcG9uc2VQYXJzZXIucGFyc2UodGhpcy5yYXcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IEFQSSByZXNwb25zZSBjb2RlXG4gICAgICogQHJldHVybnMgQVBJIHJlc3BvbnNlIGNvZGVcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Q29kZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5oYXNoLkNPREUsIDEwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgQVBJIHJlc3BvbnNlIGRlc2NyaXB0aW9uXG4gICAgICogQHJldHVybnMgQVBJIHJlc3BvbnNlIGRlc2NyaXB0aW9uXG4gICAgICovXG4gICAgcHVibGljIGdldERlc2NyaXB0aW9uKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc2guREVTQ1JJUFRJT047XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IFBsYWluIEFQSSByZXNwb25zZVxuICAgICAqIEByZXR1cm5zIFBsYWluIEFQSSByZXNwb25zZVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRQbGFpbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5yYXc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IFF1ZXVldGltZSBvZiBBUEkgcmVzcG9uc2VcbiAgICAgKiBAcmV0dXJucyBRdWV1ZXRpbWUgb2YgQVBJIHJlc3BvbnNlXG4gICAgICovXG4gICAgcHVibGljIGdldFF1ZXVldGltZSgpOiBudW1iZXIge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuaGFzaCwgXCJRVUVVRVRJTUVcIikpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHRoaXMuaGFzaC5RVUVVRVRJTUUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwLjAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBBUEkgcmVzcG9uc2UgYXMgSGFzaFxuICAgICAqIEByZXR1cm5zIEFQSSByZXNwb25zZSBoYXNoXG4gICAgICovXG4gICAgcHVibGljIGdldEhhc2goKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzaDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgUnVudGltZSBvZiBBUEkgcmVzcG9uc2VcbiAgICAgKiBAcmV0dXJucyBSdW50aW1lIG9mIEFQSSByZXNwb25zZVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRSdW50aW1lKCk6IG51bWJlciB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5oYXNoLCBcIlJVTlRJTUVcIikpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHRoaXMuaGFzaC5SVU5USU1FKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMC4wMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBjdXJyZW50IEFQSSByZXNwb25zZSByZXByZXNlbnRzIGFuIGVycm9yIGNhc2VcbiAgICAgKiBBUEkgcmVzcG9uc2UgY29kZSBpcyBhbiA1eHggY29kZVxuICAgICAqIEByZXR1cm5zIGJvb2xlYW4gcmVzdWx0XG4gICAgICovXG4gICAgcHVibGljIGlzRXJyb3IoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc2guQ09ERS5jaGFyQXQoMCkgPT09IFwiNVwiO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGN1cnJlbnQgQVBJIHJlc3BvbnNlIHJlcHJlc2VudHMgYSBzdWNjZXNzIGNhc2VcbiAgICAgKiBBUEkgcmVzcG9uc2UgY29kZSBpcyBhbiAyeHggY29kZVxuICAgICAqIEByZXR1cm5zIGJvb2xlYW4gcmVzdWx0XG4gICAgICovXG4gICAgcHVibGljIGlzU3VjY2VzcygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzaC5DT0RFLmNoYXJBdCgwKSA9PT0gXCIyXCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgY3VycmVudCBBUEkgcmVzcG9uc2UgcmVwcmVzZW50cyBhIHRlbXBvcmFyeSBlcnJvciBjYXNlXG4gICAgICogQVBJIHJlc3BvbnNlIGNvZGUgaXMgYW4gNHh4IGNvZGVcbiAgICAgKiBAcmV0dXJucyBib29sZWFuIHJlc3VsdFxuICAgICAqL1xuICAgIHB1YmxpYyBpc1RtcEVycm9yKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNoLkNPREUuY2hhckF0KDApID09PSBcIjRcIjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBjdXJyZW50IG9wZXJhdGlvbiBpcyByZXR1cm5lZCBhcyBwZW5kaW5nXG4gICAgICogQHJldHVybnMgYm9vbGVhbiByZXN1bHRcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNQZW5kaW5nKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmhhc2gsIFwiUEVORElOR1wiKSA/IHRoaXMuaGFzaC5QRU5ESU5HID09PSBcIjFcIiA6IGZhbHNlKTtcbiAgICB9XG59XG4iXX0=